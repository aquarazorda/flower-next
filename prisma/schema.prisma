generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Room {
  id              Int              @id @unique @default(autoincrement())
  roomId          Int              @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  name            String
  order           Int              @default(0)
  blockedDate     BlockedDate?
  prices          Price?
  info            RoomInfo?
  type            String
  priceAdjustment PriceAdjustment?
}

model RoomInfo {
  id          Int      @id @default(autoincrement())
  msId        Int?      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roomId      Int      @unique
  room        Room?    @relation(fields: [roomId], references: [roomId])
  description String?  @db.VarChar(2000)
  pictures    Json?
  persons     Int      @default(3)
  extraPerson Boolean  @default(true)
}

model BlockedDate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dates     Json
  roomId    Int      @unique
  room      Room?    @relation(fields: [roomId], references: [roomId])
}

model User {
  id           String    @id @unique
  username     String
  auth_session Session[]
  key          Key[]
  email        String?
  phone        String?
  firstName    String?
  lastName     String?
  dateCreated  DateTime  @default(now())
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Price {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  list      Json
  roomId    Int      @unique
  room      Room?    @relation(fields: [roomId], references: [roomId])
}

model PriceAdjustment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  list      Json
  roomId    Int      @unique
  room      Room?    @relation(fields: [roomId], references: [roomId])
}

model Transaction {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  roomId        Int
  status        String
  dateFrom      DateTime
  dateEnd       DateTime
  userId        Int
  amount        Int
  transactionId String?
}

enum VerificationStatus {
  PENDING
  FAILED
  SUCCESS
}

model VerifiedEmail {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  status           VerificationStatus @default(PENDING)
  verificationCode String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([email])
}

enum ReservationType {
  PAYMENT
  RESERVATION
}

enum ReservationStatus {
  PENDING
  FAILED
  PAID
  RESERVED
}

model Reservation {
  id          String            @id @default(uuid())
  email       String
  phoneNumber String
  firstName   String
  lastName    String
  status      ReservationStatus @default(PENDING)
  price       Int               @default(0)
  roomId      Int
  dateFrom    DateTime
  dateTo      DateTime
  error       String?
  type        ReservationType
  createdAt   DateTime          @default(now())
  paymentId   String?
}
